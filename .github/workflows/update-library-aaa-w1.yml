name: Update library aaa w1

on:
  schedule:
    - cron: "0,10,20,30,40,50 * * * *"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Debug env vars
        shell: bash
        run: |
          echo -e "GITHUB_REPOSITORY: $GITHUB_REPOSITORY\n"
          echo -e "GITHUB_WORKSPACE: $GITHUB_WORKSPACE\n"
          echo -e "GITHUB_SHA: $GITHUB_SHA\n"
          echo -e "GITHUB_REF: $GITHUB_REF\n"
          echo -e "GITHUB_HEAD_REF: $GITHUB_HEAD_REF\n"
          echo -e "GITHUB_BASE_REF: $GITHUB_BASE_REF\n"
          echo -e "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME\n"
          echo -e "GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH\n"
          echo -e "GITHUB_RUN_ID: $GITHUB_RUN_ID\n"
          echo -e "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER\n"

      - uses: actions/checkout@v2
        with:
          submodules: "true"

      - name: Update submodule
        id: update-submodule
        shell: bash
        run: |
          git submodule status libraries/aaa
          PREVIOUS_REF=$(git submodule status | awk '{print $1}' | sed 's/-//' | sed 's/+//' | sed 's/U//')
          echo "::set-output name=previous_ref::$PREVIOUS_REF"
          git submodule update --remote libraries/aaa
          CURRENT_REF=$(git submodule status | awk '{print $1}' | sed 's/-//' | sed 's/+//' | sed 's/U//')
          echo "::set-output name=current_ref::$CURRENT_REF"
          if [ "$PREVIOUS_REF" != "$CURRENT_REF" ]; then echo "::set-output name=updated::true"; else echo "::set-output name=updated::false"; fi

      - name: Set git config user to GitHub Bot
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'  

      - name: Claim lock
        id: claim-lock
        if: ${{ steps.update-submodule.updated }}
        shell: bash
        run: |
          ./scripts/check-lock.sh
          git commit --allow-empty -m "claim lock ${{ github.run_id }}"
          git push
          echo "::set-output name=lock_claimed::true"

      - name: Commit submodule update
        id: commit-submodule-update
        if: ${{ steps.update-submodule.updated && steps.claim-lock.lock_claimed }}
        run: |
          # rebase lock
          git pull --rebase
          # update file with version
          NOW=$(date)
          echo "Version ${{ steps.update-library.outputs.current_ref }} updated on $NOW" > library-aaa.version
          git add library-aaa.version
          # commit submodule update
          git add libraries/aaa
          git commit -m "update library aaa to commit ${{ steps.update-library.outputs.current_ref }}"

      - name: Sync files from library
        if: ${{ steps.update-submodule.updated && steps.claim-lock.lock_claimed }}
        id: copy-library
        run: |
          rsync -a --delete --include='*.txt' ./libraries/aaa/ ./libraries_mirror/aaa

      - name: Apply changes with a single commit
        if: ${{ steps.update-submodule.updated && steps.claim-lock.lock_claimed }}
        run: |
          git add libraries_mirror/aaa
          # commit only if there are changes
          git diff-index --quiet HEAD || git commit -m "library aaa synced to commit ${{ steps.update-submodule.outputs.current_ref }}"
          git push

      - name: Release lock
        if: ${{ steps.claim-lock.lock_claimed }}
        run: |
          git pull --rebase
          git commit --allow-empty -m "release lock ${{ github.run_id }}"
          git push          
